// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: projects/baize/pkg/proto/scheduler/scheduler.proto

package scheduler

import (
	context "context"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu    int32 `protobuf:"varint,1,opt,name=Cpu,proto3" json:"Cpu,omitempty"`
	Memory int64 `protobuf:"varint,2,opt,name=Memory,proto3" json:"Memory,omitempty"`
}

func (x *Property) Reset() {
	*x = Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_projects_baize_pkg_proto_scheduler_scheduler_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Property) ProtoMessage() {}

func (x *Property) ProtoReflect() protoreflect.Message {
	mi := &file_projects_baize_pkg_proto_scheduler_scheduler_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Property.ProtoReflect.Descriptor instead.
func (*Property) Descriptor() ([]byte, []int) {
	return file_projects_baize_pkg_proto_scheduler_scheduler_proto_rawDescGZIP(), []int{0}
}

func (x *Property) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *Property) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

type RegisterExecutorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutorInfo *Property `protobuf:"bytes,1,opt,name=executor_info,json=executorInfo,proto3" json:"executor_info,omitempty"`
	ExecutorAddr string    `protobuf:"bytes,2,opt,name=executor_addr,json=executorAddr,proto3" json:"executor_addr,omitempty"`
}

func (x *RegisterExecutorRequest) Reset() {
	*x = RegisterExecutorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_projects_baize_pkg_proto_scheduler_scheduler_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterExecutorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterExecutorRequest) ProtoMessage() {}

func (x *RegisterExecutorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_projects_baize_pkg_proto_scheduler_scheduler_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterExecutorRequest.ProtoReflect.Descriptor instead.
func (*RegisterExecutorRequest) Descriptor() ([]byte, []int) {
	return file_projects_baize_pkg_proto_scheduler_scheduler_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterExecutorRequest) GetExecutorInfo() *Property {
	if x != nil {
		return x.ExecutorInfo
	}
	return nil
}

func (x *RegisterExecutorRequest) GetExecutorAddr() string {
	if x != nil {
		return x.ExecutorAddr
	}
	return ""
}

type RegisterExecutorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RegisterExecutorResponse) Reset() {
	*x = RegisterExecutorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_projects_baize_pkg_proto_scheduler_scheduler_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterExecutorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterExecutorResponse) ProtoMessage() {}

func (x *RegisterExecutorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_projects_baize_pkg_proto_scheduler_scheduler_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterExecutorResponse.ProtoReflect.Descriptor instead.
func (*RegisterExecutorResponse) Descriptor() ([]byte, []int) {
	return file_projects_baize_pkg_proto_scheduler_scheduler_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterExecutorResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_projects_baize_pkg_proto_scheduler_scheduler_proto protoreflect.FileDescriptor

var file_projects_baize_pkg_proto_scheduler_scheduler_proto_rawDesc = []byte{
	0x0a, 0x32, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x62, 0x61, 0x69, 0x7a, 0x65,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x1a,
	0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x34, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x43, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0x78,
	0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x22, 0x46, 0x0a, 0x18, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x32, 0x62, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x55, 0x0a,
	0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x4e, 0x5a, 0x4c, 0x67, 0x6f, 0x2e, 0x6d, 0x65, 0x67, 0x76, 0x69,
	0x69, 0x2d, 0x69, 0x6e, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2f,
	0x62, 0x72, 0x61, 0x69, 0x6e, 0x70, 0x70, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x62, 0x61, 0x69, 0x7a, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x3b, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_projects_baize_pkg_proto_scheduler_scheduler_proto_rawDescOnce sync.Once
	file_projects_baize_pkg_proto_scheduler_scheduler_proto_rawDescData = file_projects_baize_pkg_proto_scheduler_scheduler_proto_rawDesc
)

func file_projects_baize_pkg_proto_scheduler_scheduler_proto_rawDescGZIP() []byte {
	file_projects_baize_pkg_proto_scheduler_scheduler_proto_rawDescOnce.Do(func() {
		file_projects_baize_pkg_proto_scheduler_scheduler_proto_rawDescData = protoimpl.X.CompressGZIP(file_projects_baize_pkg_proto_scheduler_scheduler_proto_rawDescData)
	})
	return file_projects_baize_pkg_proto_scheduler_scheduler_proto_rawDescData
}

var file_projects_baize_pkg_proto_scheduler_scheduler_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_projects_baize_pkg_proto_scheduler_scheduler_proto_goTypes = []interface{}{
	(*Property)(nil),                 // 0: scheduler.Property
	(*RegisterExecutorRequest)(nil),  // 1: scheduler.RegisterExecutorRequest
	(*RegisterExecutorResponse)(nil), // 2: scheduler.RegisterExecutorResponse
	(*status.Status)(nil),            // 3: google.rpc.Status
}
var file_projects_baize_pkg_proto_scheduler_scheduler_proto_depIdxs = []int32{
	0, // 0: scheduler.RegisterExecutorRequest.executor_info:type_name -> scheduler.Property
	3, // 1: scheduler.RegisterExecutorResponse.status:type_name -> google.rpc.Status
	1, // 2: scheduler.Scheduler.Register:input_type -> scheduler.RegisterExecutorRequest
	2, // 3: scheduler.Scheduler.Register:output_type -> scheduler.RegisterExecutorResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_projects_baize_pkg_proto_scheduler_scheduler_proto_init() }
func file_projects_baize_pkg_proto_scheduler_scheduler_proto_init() {
	if File_projects_baize_pkg_proto_scheduler_scheduler_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_projects_baize_pkg_proto_scheduler_scheduler_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_projects_baize_pkg_proto_scheduler_scheduler_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterExecutorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_projects_baize_pkg_proto_scheduler_scheduler_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterExecutorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_projects_baize_pkg_proto_scheduler_scheduler_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_projects_baize_pkg_proto_scheduler_scheduler_proto_goTypes,
		DependencyIndexes: file_projects_baize_pkg_proto_scheduler_scheduler_proto_depIdxs,
		MessageInfos:      file_projects_baize_pkg_proto_scheduler_scheduler_proto_msgTypes,
	}.Build()
	File_projects_baize_pkg_proto_scheduler_scheduler_proto = out.File
	file_projects_baize_pkg_proto_scheduler_scheduler_proto_rawDesc = nil
	file_projects_baize_pkg_proto_scheduler_scheduler_proto_goTypes = nil
	file_projects_baize_pkg_proto_scheduler_scheduler_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchedulerClient interface {
	Register(ctx context.Context, in *RegisterExecutorRequest, opts ...grpc.CallOption) (*RegisterExecutorResponse, error)
}

type schedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerClient(cc grpc.ClientConnInterface) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) Register(ctx context.Context, in *RegisterExecutorRequest, opts ...grpc.CallOption) (*RegisterExecutorResponse, error) {
	out := new(RegisterExecutorResponse)
	err := c.cc.Invoke(ctx, "/scheduler.Scheduler/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerServer is the server API for Scheduler service.
type SchedulerServer interface {
	Register(context.Context, *RegisterExecutorRequest) (*RegisterExecutorResponse, error)
}

// UnimplementedSchedulerServer can be embedded to have forward compatible implementations.
type UnimplementedSchedulerServer struct {
}

func (*UnimplementedSchedulerServer) Register(context.Context, *RegisterExecutorRequest) (*RegisterExecutorResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Register not implemented")
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterExecutorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Register(ctx, req.(*RegisterExecutorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Scheduler_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "projects/baize/pkg/proto/scheduler/scheduler.proto",
}
